======
Syntax
======

e, t ::= n | x | e1 + e2 | \x . e | \x : t . e | e1 e2 | pi (x :t1). t2 | Int | *

T ::=  | T, x | T, x : t 

======
Typing
======

==========
T |- e => t -| U
T |- e <= t -| U
==========

T |- * => * -| T

T |- Int => * -| T

T |- n => Int -| T

T |- t1 <= * -| X        X, x : t1 |- t2 <= * -| Y, x : t1'            (note: t1' may be more precise than t1?)
-----------------------------------------
T |- pi (x : t1) . t2 => * -| Y

T |- e1 <= Int -| X      X |- e2 <= Int -| Y
---------------------------------
T |- e1 + e2 => Int -| Y

T, x |- e => t2 -| X, x : t1
-------------------------- (if we get X, x then ask user to annotate x) 
T |- \x . e => pi (x: t1) . t2 -| X 

T, x : t1 |- e => t2 -| X, x : t1      
---------------------------------
T |- \x : t1. e => pi (x: t1) . t2 -| X 

T |- e1 => pi (x: t1) . t2 -| X        X |- e2 <= t1 -| Y
-----------------------------------------  (does not work, if e1 is a variable)
T |- e1 e2 => t2 [x -> e2] -| Y

X |- e2 => t1 -| Y         T, y : ~y |- e1 <= pi (x:t1) . ~y -| X, y : t2       y fresh  
------------------------------------------------------------  
T |- e1 e2 => t2 -| Y

x:t \in T
------------------
T |-  x => t  -| T

-------------------------- (Special rule, creates a "unification variable")
T, x, X |- x => ~x  -| T, x : ~x, X

T |- e => t1 -| X           X |- t1 <: t2 -| Y
--------------------------------- TSub
T |- e <= t2 -| Y

======
Old rules (made redundant by the subsumption rule?)
======

----------------------------------------------------
T, x, Y |- x <= t  -| T [~x -> t], x : t, Y[~x -> t]          (is the scoping of ~x correct here?)

T, x : t1 |- e <= t2 -| X, x : t1'                                             (note: t1' may be more precise than t1?)
-----------------------------
T |- \x . e <= pi (x : t1) . t2 -| X 

T |- e2 => t1 -| X      X |- e1 <= pi (x: t1) . t2 -| Y        
-----------------------------------------
T |- e1 e2 <= t2 -| Y

=======
Unification
=======

-------------
X |- t1 <: t2 -| Y   (Rule form)
-------------

T |- * <: * -| T

T |- Int <: Int -| T

T[x] |- x <: x -| T[x]

T[x] |- ~x <: ~x -| T[x]

T, x : ~x, X [y] |- ~x <: ~y -| T, x : ~x, X [~y -> ~x]

T, x : ~x, X [y] |- ~y <: ~x -| T, x : ~x, X [~y -> ~x]

~x not in FV(t)
----------------------------------
T, x : ~x, X |- ~x <: t -|  T, x : t, X [~x -> t]       (double-check scoping, can T contain ~x?)

~x not in FV(t)
----------------------------------
T, x : ~x, X |- t <: ~x -|  T, x : t, X [~x -> t]       (double-check scoping, can T contain ~x?)

T |- t2 <: t4 -| X                   X |- [X] t1 <: [X] t3 -| Y
-----------------------------------------
T |- t1 t2 <: t3 t4 -| Y

T, x : ~x  |- t1 <: t2 -| X, x : t              
------------------------
T |- \x . t1 <: \x . t2 -| X

T, x : t  |- t1 <: t2 -| X, x : t        (note that annotations for lambda's are always written by users and are free of unification variables)           
----------------------
T |- \x : t . t1 <: \x . t2 -| X

T |- t3 <: t1 -| X        X, x : [X] t1 |- [X] t2 <: [X] t4 -| Y, x : t1'       (t1 may contain unification variables and may be refined)
-------------------------------------------------
T |- pi (x : t1) . t2 <: pi (x : t3) . t4 -| Y


Tests:

x |- x => Int -| x : Int     x : Int |- Int <: Int -| x : Int                x:Int |- 1 => Int -| x : Int       x : Int |- Int <: Int -| x : Int
------------------------------------------ TSub      --------------------------------------------- TSub
x |- x <= Int -| x:Int                                                                   x:Int |- 1 <= Int -| x:Int 
---------------------------------------------------------------------------
x |- x + 1 => Int -| x : Int
----------------------
|- \x . x+1 => Int -> Int -|




g,x |- x => ~x -| g,x          g,x |- g <= ~x -> Int -| g : ~x -> Int,x
-------------------------------------------------

g, x |- g : ~g |- g : ~g, x
-------------------
g, x |- g x => Int -| 
----------------------------- TSub
g, x |- g x <= Int -| g : ~x -> Int, x     ... |- x <= Int -| g : Int-> Int, x:Int
----------------------------------------------------------------
g, x |- g x + x => Int -| g : Int-> Int, x:Int
---------------------------------------
|- \g \x . g x + x => (Int -> Int) -> Int -> Int -|



g, x |- x => ~x -| g, x        g, x |- g <= ~x -> Int |- g : ~x -> Int, x           g : ~x -> Int, x |- 1 => Int -| ...       g : ~x -> Int, x |- g <= Int -> Int -|  ??
------------------------------------------------------          ----------------------------------------------------------
g, x |- g x <= Int  -|  g : ~x -> Int, x                                                            g : ~x -> Int, x |- g 1 <= Int
----------------------------------------------------------------------------------
g, x |- g x + g 1 => 
-----------------
|- \g \x. g x + g 1 => 
